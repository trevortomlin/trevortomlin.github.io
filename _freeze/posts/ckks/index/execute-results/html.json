{
  "hash": "adf293014a317ada4df755bb1eedc67e",
  "result": {
    "markdown": "---\ntitle: \"Introduction to CKKS\"\nauthor: \"Trevor Tomlin\"\ndate: \"2023-09-14\"\ncategories: [cryptography]\n---\n\n# An introduction to the **HEAAN / CKKS** homomorphic encryption scheme\nThe **HEAAN / CKKS** scheme introduced in the paper, *Homomorphic Encryption\nfor Arithmetic of Approximate Numbers* or named after the authors, Jung Hee Cheon, Andrey Kim, Miran Kim, and Yongsoo Song is a leveled\nhomomorphic scheme based upon the Ring Learning with Errors (RLWE) problem that allows encypted computation on real real numbers. This scheme differs from\nBGV/BFV schemes because it works on real numbers rather than integers.\n\n## Notation\nUnderstanding the following notations will be helpful for reading this blog post:\n\n* $\\mathcal{R} = \\mathbb{Z}[X]/(X^N +1)$\n* $\\mathbb{Z}_q$ is in the range $(−q/2, q/2]$\n* $\\lfloor x \\rceil$ represents the rounding of the real number x to the closest integer\n\n## Parameters\n\n$\\Delta$ is the scaling factor\n\n## Encoding \nThis scheme operates allows us to encode a vector, $\\mathbb{C}^{N/2}$, into the ciphertext space, $\\mathcal{R}_q = (\\mathbb{Z}/q\\mathbb{Z})[X]/(X^N +1)$ \nusing a ring isomorphism and cannoncial embedding map. \n\nA cyclotomic polynomial is a polynomial with integer coefficients whose roots are all\nprimitive. An example would be the 4th cyclotomic polynomial or $\\phi_4(x) = x^2 + 1$.\nOne important property of cyclotomic polynomials is that if N is a power of two, then\nthe polynomial is equal to $x^{N/2} + 1$. \n\n<!-- ADD MORE ABOUT WHY POWERS OF 2 ARE GOOD -->\n[A Toolkit for Ring-LWE Cryptography](https://web.eecs.umich.edu/~cpeikert/pubs/toolkit.pdf)\n\nMore information about these polynomials can be \nfound here on [Wikipedia](https://en.wikipedia.org/wiki/Cyclotomic_polynomial)\n\nFor any cyclotomic polynomial, $a$, we can say that $a(\\xi^j) = a(\\overline{\\xi^{-j}})$ \n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport math\n\ndef primitive_nth_roots_of_unity(n: int) -> np.ndarray:\n    roots = []\n    \n    for i in range(1, n+1):\n        if math.gcd(i, n) == 1:\n            root = np.e ** (2 * np.pi * 1j * i / n)\n            roots.append(root)\n\n    return np.array(roots)\n\neigth_prim_roots = primitive_nth_roots_of_unity(8)\n\nfor i, r in enumerate(eigth_prim_roots):\n    print(f\"Root #{i+1}: {r}\\nConjugate: {np.conjugate(r)}\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRoot #1: (0.7071067811865476+0.7071067811865475j)\nConjugate: (0.7071067811865476-0.7071067811865475j)\n\nRoot #2: (-0.7071067811865475+0.7071067811865476j)\nConjugate: (-0.7071067811865475-0.7071067811865476j)\n\nRoot #3: (-0.7071067811865477-0.7071067811865475j)\nConjugate: (-0.7071067811865477+0.7071067811865475j)\n\nRoot #4: (0.7071067811865474-0.7071067811865477j)\nConjugate: (0.7071067811865474+0.7071067811865477j)\n\n```\n:::\n:::\n\n\nFrom this week can see that $\\xi^1 = \\overline{\\xi^7}$ and $\\xi^3 = \\overline{\\xi^5}$.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nn = 8\n\nroots = [np.exp(2j * np.pi * k / n) for k in range(n) if np.gcd(k, n) == 1]\n\nreal_parts = [root.real for root in roots]\nimaginary_parts = [root.imag for root in roots]\n\nlabels = ['ξ^1', 'ξ^3', 'ξ^5', 'ξ^7']\n\nfor i, (x, y) in enumerate(zip(real_parts, imaginary_parts)):\n    plt.scatter(x, y, color='red', label=labels[i])\n    plt.text(x + 0.1, y, labels[i], fontsize=12)\n\nfor root in roots:\n    plt.plot([0, root.real], [0, root.imag], linestyle='--', color='blue')\n\nplt.xlabel('Real Part')\nplt.ylabel('Imaginary Part')\nplt.axhline(0, color='black', linewidth=0.5)\nplt.axvline(0, color='black', linewidth=0.5)\nplt.grid(color='gray', linestyle='--', linewidth=0.5)\n\nplt.axis('equal')\n\nplt.xlim(-1.5, 1.5)\nplt.ylim(-1.5, 1.5)\n\nplt.title(f'Primitive 8th Roots of Unity')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=619 height=449}\n:::\n:::\n\n\nThis makes intuitive sense if we look at a graph of the roots and see that primitive roots of unity are always symmetric over the x axis.\n\n$\\mathbb{H}$ of is a subring of $\\mathbb{C}^N$ that contains elements of $\\mathbb{C}^N$ where the conjugate is also in the subring.\n\nWe define an operation $\\pi^{-1}$ which expands a vector $\\mathbb{C}^{N/2}$ into $\\mathbb{H}$\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef pi_inverse(z: np.ndarray) -> np.ndarray:\n    return np.concatenate([z, [np.conjugate(x) for x in z[::-1]]])\n\nz = np.array([3+4j,2-1j])\n\nfor i in range(len(z)):\n    print(f\"i: {i}, {z[i]} = i: {(-i-1) % 4}, {np.conjugate(z[-i])}\")\n\nprint()\nprint(list(pi_inverse(z)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ni: 0, (3+4j) = i: 3, (3-4j)\ni: 1, (2-1j) = i: 2, (2+1j)\n\n[(3+4j), (2-1j), (2+1j), (3-4j)]\n```\n:::\n:::\n\n\n$\\sigma(x)$ is equivalent to the evaluation of a polynomial on the roots of unity\nfor the given cyclotomic polynomial which will produce an element in $\\mathbb{C}^N$. \n\nImagine $\\Delta$ is 10,000. We can say that $\\frac{(\\Delta m * \\Delta n)}{\\Delta^2} =  m * n$. \nFor example let $m = 3.14$ and $n = 2.72$. We expect the result to equal 8.5408.\n\n1. Multiply $m$ by $\\Delta$, $\\Delta * m = 31,400$\n2. Multiply $n$ by $\\Delta$, $\\Delta * n = 27,200$\n3. Add $\\Delta m * \\Delta n = 854,080,000$\n4. Divide result by $\\Delta^2$, $854,080,000 / \\Delta^2 = 8.5408$\n\nThe canonical embedding $\\sigma$ is defined as $\\sigma : \\mathbb{R}[X]/(X^N +1) \\rightarrow \\mathbb{C}^N$ which is equaluating the polynomial on\nthe primitive complex roots of unity to get a vector of points\nIts inverse would be $\\sigma^{-1} : \\mathbb{C}^N \\rightarrow \\mathbb{R}[X]/(X^N +1)$ which takes a list of points and produces a polynomial.\n\nAn element in $\\mathbb{H}$ is not necessarily an element in $\\sigma(\\mathcal{R})$ so we have to project each element into $\\sigma(\\mathcal{R})$.\n\nWe want to project the elements of $\\mathbb{H}$ onto the bases of $\\sigma(\\mathcal{R})$ which are $\\beta = (\\sigma(1),\\sigma(X),\\dots,\\sigma(X^{N−1}))$ and to have integer coefficients rather than complex ones.\n\nThe first step is to project the elements of our vector $z$ onto the bases of $\\sigma(\\mathcal{R})$.\n\nThis can be done by using the vector projection equation first learning in a college algebra course.\nIt is defined as $proj_\\beta z = \\frac{z * \\beta}{\\left\\| \\beta \\right\\|} * \\beta$.\n\nAfter that we will have a polynomial that has the same bases of $\\sigma(\\mathcal{R})$, but we still need to round it so that it has integer coefficients.\n\nA technique for this discretization is called \"coordinate-wise randomized rounding\" and is explained in section 2.4.2 of [A Toolkit for Ring-LWE Cryptography](https://web.eecs.umich.edu/~cpeikert/pubs/toolkit.pdf).\n\nLet $\\Lambda = \\mathcal{L}(B) \\subset \\mathbb{R}$ represented by the basis $B$ Given a point $x \\in \\mathbb{R}$ and a coset $c \\in \\mathbb{R}$, the goal is to find an element, $y$ on the lattice $\\Lambda$ that minimizes the length of $y-x$.\n\nWe define a new coset, $c' = \\Sigma^{n}_i=1=a_ib_i \\mod \\lambda$ for the coefficients a which are the decimal parts of our x point between 0 and 1.\nWe choose $f_i$ randomly from $\\{a-1, a\\}$. We then multiply by the basis to complete the prijection.\n\nIn other words, we first compute $randround(\\frac{\\langle z_i b_i \\rangle}{\\langle b_i b_i\\rangle})$ for every basis vector and then\nwe multiply it by $b$ like the previous projection formula told us.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef rand_round(x: float) -> int:\n    decimal = x - np.floor(x)\n    f = np.random.choice([decimal-1, decimal])\n    return int(x + f)\n\n\ndef cwrr(coords: np.ndarray) -> np.ndarray:\n    return np.array([rand_round(x) for x in coords])\n\n\ndef discretization(z: np.ndarray) -> np.ndarray:\n    bases = np.vander(primitive_nth_roots_of_unity(2*N), N, increasing=True).T\n    proj = np.array([np.real(np.vdot(z, b) / np.vdot(b,b)) for b in bases])\n\n    return cwrr(proj) @ bases\n```\n:::\n\n\nAfter that we have have to compute $\\sigma^{-1}(\\lfloor\\Delta \\pi^{-1}(m)\\rceil_{\\sigma(\\mathcal{R})})$ to get \nour final transformation into the ciphertext space $\\mathbb{Z}_q[X]/(X^N +1)$\n\nWe have a list of points so we can use the vandermonde matrix to solve for the coefficients by solving\n$Va = y$ where V is the vandermonde matrix, a are the polynomial coefficients, and y are the points that we have.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom numpy.polynomial import Polynomial\n\n\ndef sigma_inverse(b: np.ndarray) -> Polynomial:\n    A = np.vander(primitive_nth_roots_of_unity(2*N), N, increasing=True)\n    coeffs = np.linalg.solve(A, b)\n    return Polynomial(coeffs)\n```\n:::\n\n\nOnce we put it together we have our complete encoding functionality.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nDELTA = 64\nN = 4\n\n\ndef pi_inverse(z: np.ndarray) -> np.ndarray:\n    return np.concatenate([z, [np.conjugate(x) for x in z[::-1]]])\n\n\ndef rand_round(x: float) -> int:\n    decimal = x - np.floor(x)\n    f = np.random.choice([decimal-1, decimal])\n    return int(x + f)\n\n\ndef cwrr(coords: np.ndarray) -> np.ndarray:\n    return np.array([rand_round(x) for x in coords])\n\n\ndef discretization(z: np.ndarray) -> np.ndarray:\n    bases = np.vander(primitive_nth_roots_of_unity(2*N), N, increasing=True).T\n    proj = np.array([np.real(np.vdot(z, b) / np.vdot(b,b)) for b in bases])\n\n    return cwrr(proj) @ bases\n\n\ndef sigma_inverse(b: np.ndarray) -> Polynomial:\n    A = np.vander(primitive_nth_roots_of_unity(2*N), N, increasing=True)\n    coeffs = np.linalg.solve(A, b)\n    return Polynomial(coeffs)\n\n\ndef encode(z: np.ndarray) -> Polynomial:\n    out = pi_inverse(z)\n    out *= DELTA\n    out = discretization(out)\n    out = sigma_inverse(out)\n    \n    out = np.round(np.real(out.coef)).astype(int)\n    return Polynomial(out)\n\n\nz = np.array([3+4j, 2-1j])\nencoded_z = encode(z)\nprint(encoded_z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n159.0 + 90.0·x + 159.0·x² + 45.0·x³\n```\n:::\n:::\n\n\nIf compare with the paper's example we can see that we got the same polynomial that they did and our scheme worked.\n\nTo recap how our encoding scheme encodes $m \\in \\mathbb{C}^{N/2} \\rightarrow \\mathbb{Z}_q[X]/(X^N +1)$:\n\n1. $\\pi^{-1}(m)$ applies $\\mathbb{C}^{N/2} \\rightarrow \\mathbb{H}$\n2. Scale our element: $\\Delta \\pi^{-1}(m)$\n3. Project and randomly round our element into the space of $\\sigma(\\mathcal{R})$\n4. Apply $\\sigma^{-1}(\\lfloor\\Delta \\pi^{-1}(m)\\rceil_{\\sigma(\\mathcal{R})}) \\in \\mathbb{Z}_q[X]/(X^N +1)$\n\n## Decoding\n\nDecoding is very easy to understand as it is pretty much the opposite of encoding.\n\nOur goal is to convert the polynomial in the ring $\\mathbb{Z}_q[X]/(X^N +1)$ to our plaintext in the space $\\mathbb{C}^{N/2}$.\n\nFirst we have to multiply our polynomial by $\\Delta^{-1}$.\n\nThen we use the canonical embedding map $\\sigma: \\mathbb{R}[X]/(X^N +1) \\rightarrow \\mathbb{C}^{N/2}$ which is equivalent to\nevaluating the polynomial, p, at all of our primitive roots of unity and can be calculated with the vandermonde matrix.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef sigma(p: Polynomial) -> np.ndarray:\n    V = np.vander(primitive_nth_roots_of_unity(2*N), N, increasing=True)\n    a = p.coef\n    y = V @ a\n    return y\n```\n:::\n\n\nNext we have to perform $\\pi$ to take an element $\\in \\mathbb{H}$ and transform it into and element $\\in \\mathbb{C}^{N/2}$\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef pi(z: np.ndarray) -> np.ndarray:\n    return z[:N//2]\n```\n:::\n\n\nNow we put it all together to get our decoding function.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndef decode(p: Polynomial) -> np.ndarray:\n    p *= 1/DELTA\n    y = sigma(p)\n    return pi(y)\n\nprint(decode(encoded_z))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2.98155946+3.97592837j 1.98719054-0.99282163j]\n```\n:::\n:::\n\n\nWe can see that the decoded value is very close to our orignal value.\n\nTo summarize the decoding, we follow these steps:\n\n1. Multiply our polynomial by $\\Delta^{-1}$\n2. Use the canoncial embedding map on our polynomial: $\\sigma: \\mathbb{R}[X]/(X^N +1) \\rightarrow \\mathbb{C}^{N/2}$\n3. Transform our element from $\\mathbb{H} \\rightarrow \\mathbb{C}^{N/2}$ using $\\pi$\n\n## RLWE\n\nThe ring learning with errors (RLWE) problem is closely related to the learning with errors (LWE) problem and has be proven to\nhave the same security. RLWE works with polynomials in a finite quotient ring often denoted $\\mathbb{Z}_{q}[\\ x] / \\Phi(x)\\$ where $\\Phi(x)$ is an irreducible polynomial. There are three polynomials that are used in the scheme. There is a random, but known polynomial sampled from the ring called $a(x)$, a random unknown error polynomial, $e(x)$, and an unknown secret polynomial, $s(x)$. $b(x) is formed from the equation $b(x) = a(x) * s(x) + e(x)$ and is publicly known. The RWLE problem has two different sub-problems. The first problem is called the search version and the goal is to determine the secret polynomial, $s(x)$ from the public pair (a(x), b(x)). The second problem is called the decision problem and the goal is to determine whether a polynomial $b(x)$ is from the equation $b(x) = a(x) * s(x) + e(x)$ or if it is randomly sampled from the quotient ring, $\\mathbb{Z}_{q}[\\ x] / \\Phi(x)\\$. These problems have been proven to be incredibly hard to solve even for quantum computers which makes them an excellent choice for cryptography. \n\n## Key Generation\nThe key generation phase creates a private key and uses that to create a public key and an evaluation key.\n\nWe sample $s$ from a function that returns a polynomial with coefficients that are 0 or 1 and have a specified hamming weight denoted $s \\leftarrow HWT(h)$ .\n\nThe secret key, $sk$, is defined as (1, s).\n\nWe uniformly sample coefficients for $R_{qL}$ in the range $\\lbrack qL/2, qL/2-1\\}$.\n\nThe code for this function is shown below:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndef gen_uniform_poly(n: int, modulus: int) -> Polynomial:\n    coeffs = [random.randrange(-modulus//2, modulus//2 + 1) for _ in range(n)]\n    return Polynomial(coeffs)\n```\n:::\n\n\nThen we sample a error polynomial from a discrete gaussian function denoted $e \\leftarrow DG(\\sigma^2)$.\n\nAn implementation of the discrete gaussian follows:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndef gen_gaussian_poly(n: int, modulus: int, sigma: float = 3.2) -> Polynomial:\n    return Polynomial(np.rint(np.random.normal(0, sigma**2, size=n)))\n```\n:::\n\n\nFor the final part of our public key, we set $b \\leftarrow -as + e \\space (mod \\space qL)$.\n\nOur public key, $pk$, is set to (b, a).\n\nThis is enough to do simple additions, but for a technique we will go into depth more later we need an evaluation key.\n\nLike before we sample an $a'$ and $e'$ polynomial with the same techniques. \n\nThis time, however, we set $b' \\leftarrow -a's + e' + Ps^2 \\space (mod \\space P qL)$.\n\nAnd our evaluation key, $evk$, is (b', a').\n\nAn example function in Python might look like:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nN = 4\nP = 2**15\nQ = 2**15\nL = 3\nh = 64\npoly_mod = Polynomial([1, 0, 0, 0, 1])\n\ndef keygen():\n    Ql = P ** L * Q\n\n    s = gen_hwt_poly(N, h)\n    a = gen_uniform_poly(N, Ql)\n    e = gen_gaussian_poly(N, Ql)\n\n    sk = (1, s)\n\n    b = poly_coef_mod((-a * s + e) % poly_mod, Ql)\n    pk = (b, a)\n                      \n    # evk\n    a1 = gen_uniform_poly(N, P * Ql)\n    e1 = gen_gaussian_poly(N, P * Ql)\n\n    b1 = poly_coef_mod((-a1 * s + e1 + P * (s ** 2)) % poly_mod, P * Ql)\n    evk = (b1, a1)\n\n    return pk, sk, evk\n```\n:::\n\n\n## Encryption\nThe encryption step takes an encoded message in the form of a polynomial and hides it using the public key.\n\nEncryption uses another sampling method called $\\mathcal{Z}O(\\rho)$ that outputs either -1, 0, or 1. The probability of outputting -1 or 1 is rho/2 and the probability of outputting 0 is $1 - \\rho$. \n\nHere is an implementation we can use:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndef sample_triangle(n: int) -> Polynomial:\n    coeffs = [0] * n\n\n    for i in range(n):\n        r = random.randrange(0, 4)\n        if r == 0: coeffs[i] = -1\n        elif r == 1: coeffs[i] = 1\n        else: coeffs[i] = 0\n    return Polynomial(coeffs)\n```\n:::\n\n\nThe steps for encryption are: \n\n1. Sample $v \\leftarrow \\mathcal{Z}O(0.5)$\n2. Sample $e1, e2 \\leftarrow DG(\\sigma^2)$\n3. Output $v · pk + (m + e_0, e_1) \\space (mod \\space qL)$\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndef encrypt(pk: tuple, m: Polynomial) -> tuple:\n    Ql = P ** L * Q\n\n    v = sample_triangle(N)\n    e1 = gen_gaussian_poly(N, Ql)\n    e2 = gen_gaussian_poly(N, Ql)\n\n    pk1, pk2 = pk\n\n    c1 = poly_coef_mod((v * pk1 + m + e1) % poly_mod, Ql)\n    c2 = poly_coef_mod((v * pk2 + e2) % poly_mod, Ql)\n\n    return ((c1, c2), L)\n```\n:::\n\n\n## Decryption\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndef decrypt(sk: tuple, ctx: tuple):\n    b, a = ctx[0]\n    l = ctx[1]\n    Ql = (P ** l) * Q\n    return poly_coef_mod((b + a * sk[1]) % poly_mod, Ql)\n```\n:::\n\n\n## Addition of Constants\nAddition of constants in this scheme is very simple. We just add the encoded (but not encrypted) constant to the first element of the ciphertext.\nThe following code demonstrates this addition.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndef add_const(c: tuple, const: Polynomial) -> tuple:\n    Ql = P ** c[1] * Q\n    c1, c2 = c[0]\n    cadd1 = poly_coef_mod((c1 + const) % poly_mod, Ql)\n    return ((cadd1, c2), c.l)\n```\n:::\n\n\n## Addition of Ciphertexts\nAddition of ciphertexts in CKKS is also very simple. We just output the component-wise sum of the ciphertexts. Addition in most \nhomomorphic encryption schemes does not add much noise and we usually do not have to do any noise reduction. However, if a very large number of\nadditions are performed, a noise reduction technique will have to be employed.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndef add(c1: tuple, c2: tuple) -> tuple:\n    Ql = P ** c1[1] * Q\n    c11, c12 = c1[0]\n    c21, c22 = c2[0]\n    cadd1 = poly_coef_mod((c11 + c21) % poly_mod, Ql)\n    cadd2 = poly_coef_mod((c12 + c22) % poly_mod, Ql)\n    return ((cadd1, cadd2), c1.l)\n```\n:::\n\n\n## Multiplication of Constants\nMultiplying a ciphertext by a plaintext is another simple operation as we only have to multiply each component of the ciphertext\nby the encoded constant.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndef mult_const(c: tuple, const: Polynomial) -> tuple:\n    Ql = P ** c.l * Q\n    c1, c2 = c.c\n    cmult1 = poly_coef_mod((c1 * const) % poly_mod, Ql)\n    cmult2 = poly_coef_mod((c2 * const) % poly_mod, Ql)\n    return ((cmult1, cmult2), c.l)\n```\n:::\n\n\n## Multiplication of Ciphertexts\nThe most complex operation is multiplying two ciphertexts together. The noise of each \nciphertext greatly increases the product's noise and we have to have methods to deal with it\nso that it can be correctly decrypted.\n\n## Next Steps\n\n## References\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}