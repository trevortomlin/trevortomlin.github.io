---
title: "Shamir's Secret Sharing"
author: "Trevor Tomlin"
date: "2023-06-25"
categories: [cryptography]
---

# Shamir's Secret Sharing
In the digital age, securing sensitive information is crucial. **Shamir's Secret Sharing** (SSS) is a cryptographic technique that provides a way to distribute a secret among multiple parties, ensuring that the secret can only be reconstructed when a sufficient number of parties collaborate. This method, developed by Adi Shamir in 1979, offers a robust solution for protecting sensitive data such as encryption keys, passwords, or private documents.

## How Shamir's Secret Sharing Works

Shamir's Secret Sharing employs polynomial interpolation to split a secret into multiple shares. The secret can be reconstructed only by combining a sufficient number of shares, making it mathematically infeasible to uncover the secret with fewer shares. Here's a step-by-step breakdown:

1. **Secret Generation**: The secret holder generates a secret value.
2. **Polynomial Generation**: A polynomial of degree k-1 is created, where k is the minimum number of shares required to reconstruct the secret. The constant term of the polynomial represents the secret.
3. **Share Generation**: The secret holder calculates n shares by substituting different values of x into the polynomial, where n is the total number of shares to be distributed.
4. **Share Distribution**: Each share is given to a different party. The secret holder doesn't need to disclose the secret itself, just the shares.
5. **Secret Reconstruction**: When k or more shares are combined, the secret can be reconstructed using Lagrange interpolation, a technique that recovers the polynomial based on the shares. With fewer than k shares, the secret remains secure.

Shamir's secret sharing uses the Lagrange interpolation theorem to reconstruct the secret. This theorem states that a polynomial of degree k-1 can be uniquely determined by k points on the polynomial. In this case, the points are the shares, and the polynomial is the secret.

## Real-World Applications

Shamir's Secret Sharing has found applications in various domains where secure data distribution and protection are essential:

- **Cryptocurrency**: In decentralized cryptocurrencies, private keys can be divided into shares using Shamir's Secret Sharing. This ensures that multiple parties need to collaborate to authorize transactions or access funds securely.
- **Data Protection**: Sensitive data, such as encryption keys or personal information, can be securely distributed across multiple servers or cloud providers using Shamir's Secret Sharing. This mitigates the risk of data breaches and unauthorized access.
- **Disaster Recovery**: Shamir's Secret Sharing is utilized in disaster recovery scenarios to safeguard critical information. By distributing shares across different locations or individuals, the recovery process becomes resilient against localized failures or data loss.

## Example
We are going to show an example of SSS using integer arithmetic. This is not the most secure way to implement SSS, but it is the easiest to understand. In practice we would use a finite field.

Say we want to split our secret in  a 2-out-of-3 scheme. This means that we need 2 shares to reconstruct the secret, and we have 3 shares in total.

First, we establish the secret we want to share: $a_0 = 9702$.

Then we generate k-1 random coefficients for our polynomial. In this case, k = 2, so we only need one random coefficient: $a_1 = 1337$.

The polynomial is then: $f(x) = 9702 + 1337x$.

We can now generate our shares by substituting different values of x into the polynomial. We will use the values 1, 2, and 3.

$S_1 = f(1) = 9702 + 1337(1) = 11039$
$S_2 = f(2) = 9702 + 1337(2) = 12376$
$S_3 = f(3) = 9702 + 1337(3) = 13713$

To reconstruct the secret we need to use Lagrange Interpolation.

[Wolfram Mathworld](https://mathworld.wolfram.com/LagrangeInterpolatingPolynomial.html) provides a formula for Lagrange interpolation:

For a polynomial $P(x)$ of degree $\le (n-1)$, that passes through $n$ points $(x_0, y_0), (x_1, y_1), \ldots, (x_{n-1}, y_{n-1})$, the Lagrange interpolation formula is:

$\quad P(x) = \Sigma_{i=0}^{n} P_j(x)y_i$

where

$\quad P_j(x) = \Pi_{k=1, k \neq j}^{n} \frac{x - x_k}{x_j - x_k}$

We can now distribute these shares to different parties. The secret holder does not need to disclose the secret itself, just the shares.

When we want to reconstruct the secret, we need to combine at least 2 shares. Let's combine shares 1 and 2:

```{python}
def lagrange_interpolation(x, points):
    result = 0
    for i in range(len(points)):
        xi, yi = points[i]
        term = yi
        for j in range(len(points)):
            if i != j:
                xj, _ = points[j]
                term *= (x - xj) / (xi - xj)
        result += term
    return result

# Given points
points = [(1, 11039), (2, 12376)]

# Value to interpolate at
x = 0

# Perform Lagrange interpolation
interpolated_value = lagrange_interpolation(x, points)
print(f"The interpolated value at x = {x} is {interpolated_value}")
```

This is the secret we started with, so we have successfully reconstructed the secret.

## Conclusion

Shamir's Secret Sharing provides a powerful method for distributing and safeguarding secrets among multiple parties. By utilizing polynomial interpolation and Lagrange interpolation, it ensures that sensitive information remains secure unless a sufficient number of shares are combined. This technique finds applications in various areas, including cryptography, key management, data protection, and disaster recovery.