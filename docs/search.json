[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trevor's Website",
    "section": "",
    "text": "Discrete Logarithm Problem\n\n\n\n\n\n\n\ncryptography\n\n\n\n\n\n\n\n\n\n\n\nJun 10, 2023\n\n\nTrevor Tomlin\n\n\n\n\n\n\n  \n\n\n\n\nSimple SHA-3\n\n\n\n\n\n\n\ncryptography\n\n\n\n\n\n\n\n\n\n\n\nMay 22, 2023\n\n\nTrevor Tomlin\n\n\n\n\n\n\n  \n\n\n\n\nFederated Learning From Scratch\n\n\n\n\n\n\n\nmachine learning\n\n\n\n\n\n\n\n\n\n\n\nMay 9, 2023\n\n\nTrevor Tomlin\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMay 7, 2023\n\n\nTrevor Tomlin\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I’m Trevor. I am a motivated and passionate student with a strong interest in computer science and technology. I am currently pursuing a degree in Computer Science at the University of Washington Tacoma. I enjoy exploring new technologies and topics in all branches of computer science including machine learning and cryptography. Recently I have been researching privacy preserving machine learning techniques such as federated learning, differential privacy, and homomorphic encryption. I am excited to continue learning and growing in my field, and I am eager to contribute my skills and knowledge to innovative and impactful projects."
  },
  {
    "objectID": "posts/federatedlearning/index.html",
    "href": "posts/federatedlearning/index.html",
    "title": "Federated Learning From Scratch",
    "section": "",
    "text": "Federated learning is a technique for machine learning that uses decentralized clients to train on local data and send information back to a server without revealing the local data. Federated learning helps models be trained with greater privacy and has many natural applications."
  },
  {
    "objectID": "posts/federatedlearning/index.html#how-does-federated-learning-work",
    "href": "posts/federatedlearning/index.html#how-does-federated-learning-work",
    "title": "Federated Learning From Scratch",
    "section": "How does Federated Learning Work?",
    "text": "How does Federated Learning Work?\n\nAn initial model is established on the server and the weights are sent out to all clients\nEach client trains the model on its own local data and sends the weights or gradients back to the server\nAggregate the weights of each client\nUpdate the server’s model with the aggregated weights and send the new weights to each client\nRepeat steps 2-5 for some number of iterations"
  },
  {
    "objectID": "posts/federatedlearning/index.html#how-do-we-aggregate-the-weights",
    "href": "posts/federatedlearning/index.html#how-do-we-aggregate-the-weights",
    "title": "Federated Learning From Scratch",
    "section": "How do we aggregate the weights?",
    "text": "How do we aggregate the weights?\nThe following two algorithms come from the paper Communication-Efficient Learning of Deep Networks from Decentralized Data by H. Brendan McMahan, Eider Moore, Daniel Ramage, Seth Hampson, and Blaise Aguera y Arcas from Google in 2016.\n\nFedSGD\nA simple way to update the server’s model is to update the parameters for every gradient that gets sent from a client. This method is called FedSGD and is defined as follows:\n\\[g_k = \\nabla F_k(w_t)\\] \\[ w_{t+1} \\leftarrow w_t - \\eta \\sum_{k=1}^{K}\\frac{n_k}{n}g_k\\]\nFor each client k, we do one single step of gradient descent and then average the weights together.\n\n\nFedAVG\nFedAVG is a modification of FedSGD that trains each client for multiple epochs and then averages the weights together. This method uses less communication than FedSGD and is one of the most commonly used algorithms. It is defined in the aformentioned paper as follows:\n\n\n\nExample with code\nWe first generate a simple dataset that can be used to classify two classes.We then train a centralized model using sklearn and plot the decision boundary. Next, we train a federated model using FedAVG and plot the decision boundary. Finally, we compare the accuracy of the two models.\n\n# Generate Dataset using sklearn\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\nX, y = make_classification(\n    n_features=2, n_redundant=0, n_informative=2, n_clusters_per_class=1, random_state=7\n)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Plot the data\nplt.scatter(X[:, 0], X[:, 1], marker=\"o\", c=y, s=25, edgecolor=\"k\")\nplt.show()\n\n\n\n\nFigure 1: A synthetic dataset generated using sklearn\n\n\n\n\n\nimport numpy as np\nfrom sklearn.linear_model import SGDClassifier\n\n# Train sklearn SGDClassifier model\nmodel = SGDClassifier(loss=\"log_loss\")\nmodel.fit(X_train, y_train)\n\n# Plot the decision boundary\nx1 = np.linspace(X_test.min()-3, X_test.max()+3, 100)\nx2 = np.linspace(y_test.min()-3, y_test.max()+3, 100)\nxx1, xx2 = np.meshgrid(x1, x2)\nX_grid = np.c_[xx1.ravel(), xx2.ravel()]\nprobs = model.predict_proba(X_grid)[:, 1].reshape(xx1.shape)\n\nplt.contour(xx1, xx2, probs, [0.5], linewidths=1, colors=\"black\")\nplt.scatter(X_test[:, 0], X_test[:, 1], marker=\"o\", c=y_test, s=25, edgecolor=\"k\")\nplt.show()\n\n# Print the accuracy\naccuracy = model.score(X_test, y_test) * 100.0\nprint(f\"Accuracy: {accuracy:.2f}%\")\n\n\n\n\nFigure 2: Decision boundary after training a centralized model\n\n\n\n\nAccuracy: 85.00%\n\n\n\nimport numpy as np\nfrom sklearn.linear_model import SGDClassifier\n\nn_clients = 3\nn_epochs = 3\nn_rounds = 1\n\nclient_models = [SGDClassifier(loss=\"log_loss\") for _ in range(n_clients)]\nserver_model = SGDClassifier(loss=\"log_loss\")\n\n# Split data into clients\nX_clients = np.array_split(X_train, n_clients)\ny_clients = np.array_split(y_train, n_clients)\n\n# Initialize server coefficients to 0\nserver_model.coef_ = np.zeros((1, 2))\nserver_model.intercept_ = np.zeros(1)\nserver_model.classes_ = np.array([0, 1])\n\nfor _ in range(n_rounds):\n\n    # Set client models to be the same as the server model\n    for client_model in client_models:\n        client_model.coef_ = server_model.coef_\n        client_model.intercept_ = server_model.intercept_\n\n    # Train each client model on its own data\n    for client_model, X, y in zip(client_models, X_clients, y_clients):\n\n        # Split data into batches\n        X_batches = np.array_split(X, n_epochs)\n        y_batches = np.array_split(y, n_epochs)\n\n        for _ in range(n_epochs):\n            for X_batch, y_batch in zip(X_batches, y_batches):\n                client_model.partial_fit(X_batch, y_batch, classes=[0, 1])\n\n    # Aggregate the client models using FedAVG using the number of samples as the weights\n    n_samples = [len(X) for X in X_clients]\n    weights = [n / sum(n_samples) for n in n_samples]\n\n    server_model.coef_ = np.average(\n        [client_model.coef_ for client_model in client_models], axis=0, weights=weights\n    )\n    server_model.intercept_ = np.average(\n        [client_model.intercept_ for client_model in client_models], axis=0, weights=weights\n    )\n\n# Plot the decision boundary\nx1 = np.linspace(X_test.min()-3, X_test.max()+3, 100)\nx2 = np.linspace(y_test.min()-3, y_test.max()+3, 100)\nxx1, xx2 = np.meshgrid(x1, x2)\nX_grid = np.c_[xx1.ravel(), xx2.ravel()]\nprobs = model.predict_proba(X_grid)[:, 1].reshape(xx1.shape)\n\nplt.contour(xx1, xx2, probs, [0.5], linewidths=1, colors=\"black\")\nplt.scatter(X_test[:, 0], X_test[:, 1], marker=\"o\", c=y_test, s=25, edgecolor=\"k\")\nplt.show()\n\n# Print the accuracy\naccuracy = server_model.score(X_test, y_test) * 100.0\nprint(f\"Accuracy: {accuracy:.2f}%\")\n\n\n\n\nFigure 3: Decision boundary after training a federated model\n\n\n\n\nAccuracy: 85.00%\n\n\nNow we can see that the federated model has a similar accuracy to the centralized model. If we look at the weights of the server model, we can see that they are similar to the weights of the centralized model.\n\nprint(f\"Centralized Model Weights: w={model.coef_[0]}, b={model.intercept_[0]}\")\nprint(f\"Federated Model Weights: w={server_model.coef_[0]}, b={server_model.intercept_[0]}\")\n\nCentralized Model Weights: w=[-6.13807248 21.28558495], b=5.731260349455407\nFederated Model Weights: w=[-5.8260368  24.13905334], b=6.432089614040729"
  },
  {
    "objectID": "posts/federatedlearning/index.html#a-high-level-look",
    "href": "posts/federatedlearning/index.html#a-high-level-look",
    "title": "Federated Learning From Scratch",
    "section": "A High-Level Look",
    "text": "A High-Level Look"
  },
  {
    "objectID": "posts/federatedlearning/index.html#further-reading",
    "href": "posts/federatedlearning/index.html#further-reading",
    "title": "Federated Learning From Scratch",
    "section": "Further Reading",
    "text": "Further Reading\nOther algorithms for federated learning include:\n1. FedDyn\n2. Sub-FedAvg\n3. FedAvgM\n4. FedAdam\n\nFrameworks for federated learning include:\n1. TensorFlow Federated\n2. Flower"
  },
  {
    "objectID": "posts/federatedlearning/index.html#issues-with-federated-learning",
    "href": "posts/federatedlearning/index.html#issues-with-federated-learning",
    "title": "Federated Learning From Scratch",
    "section": "Issues with Federated Learning",
    "text": "Issues with Federated Learning\nFederated Learning is a promising approach to training machine learning models on decentralized data. There are situations where Federated Learning is naturally the best solution given how the data is split up. However, there are still many issues that need to be considered before using it.  While Federated Learning helps increase privacy, it does not guarantee privacy. There are many attacks that use either malicious models or gradients to extract information about the data. To have privacy Federated Learning must be combined with something such as differential privacy or fully homomorphic encryption.  Another issue is that clients typically have different amounts of data and with different usage patterns that might not be representative of the entire dataset. This is defined as Unbalanced data and Non-IID data in the Federated Learning literature.  Finally, Federated Learning has to deal with the issue of limited communication and a large number of clients. Some clients have limited bandwidth and are offline for long periods of time. This means that the server model has to be able to handle clients that are not always available."
  },
  {
    "objectID": "posts/keccak/index.html",
    "href": "posts/keccak/index.html",
    "title": "Simple SHA-3",
    "section": "",
    "text": "Cryptographic algorithms such as Keccak play a crucial role in securing sensitive information, but they can often seem daunting and complex to understand. The National Institute of Standards and Technology (NIST) standard for Keccak, in particular, has become a widely used cryptographic algorithm due to its high security and efficiency. However, the technical jargon and complex mathematical concepts surrounding Keccak can be intimidating for those unfamiliar with the field of cryptography. In this blog post, I aim to provide a comprehensive yet accessible guide to the NIST standard for Keccak, breaking down the technical terms and explaining them in an easier to understand way."
  },
  {
    "objectID": "posts/keccak/index.html#what-is-the-nist-standard-for-keccak",
    "href": "posts/keccak/index.html#what-is-the-nist-standard-for-keccak",
    "title": "Simple SHA-3",
    "section": "What is the NIST standard for Keccak?",
    "text": "What is the NIST standard for Keccak?\nThe NIST standard for Keccak is a set of specifications for the Keccak cryptographic algorithm developed by Guido Bertoni, Joan Daemen, Michaël Peeters, and Gilles Van Assche. The NIST standard, officially known as FIPS 202, was published in 2015 as a part of a competition that NIST organized. Keccak is a family of hash functions, with different versions that provide varying levels of security and performance. The NIST standard specifies the requirements for the use of Keccak in a variety of applications, including digital signatures, key derivation, and password hashing."
  },
  {
    "objectID": "posts/keccak/index.html#understanding-keccaks-hash-function",
    "href": "posts/keccak/index.html#understanding-keccaks-hash-function",
    "title": "Simple SHA-3",
    "section": "Understanding Keccak’s Hash Function",
    "text": "Understanding Keccak’s Hash Function\nThe state of the hash function is represented as a 5x5 matrix of 64-bit words. The state is initialized to all zeros. The input is then XORed with the state. The state is then passed through the Keccak-p permutation function. This process is repeated until all of the input has been processed. The output is the state of the hash function.\nTo convert from a bit string to the state array we use the following function:\nprivate static long[][] stringToStateArray(String s) {\n    long[][] A = new long[5][5];\n    int i = 0;\n\n    for (int y = 0; y &lt; 5; y++) {\n        for (int x = 0; x &lt; 5; x++) {\n            String blockString = s.substring(i * 64, (i + 1) * 64);\n            A[x][y] = Long.reverse(Long.parseUnsignedLong(blockString, 2));\n            i++;\n            // 9 is the number of longs to store 576 (rate) / 64 (size of long) = 9 longs\n            if (i&gt;=8) {\n                return A;\n            }\n        }\n    }\n\n    return A;\n}\nMore information about this can be found in section 3.1.2 of FIPS 202.\nThe 5-step mappings in the Keccak cryptographic algorithm are the core components that transform input data into a fixed-length hash output.\nSome of the step mappings require this function, which rotates the bits of a 64-bit integer to the left by a specified number of bits:\nprivate static long rotateLeft(long x, int n) {\n    return (x &lt;&lt; n) | (x &gt;&gt;&gt; (64 - n));\n}\n\nTheta: In this step, the input data is transformed by applying a linear function to each row of the state matrix. This step helps to increase the security of the algorithm by increasing the diffusion of the input data.\n\n\n\n\nFigure 3 From FIPS 202\n\n\npublic static long[][] theta(long[][] A) {\n    long[] C = new long[5];\n    for (int x = 0; x &lt; 5; x++) {\n        C[x] = A[x][0] ^ A[x][1] ^ A[x][2] ^ A[x][3] ^ A[x][4];\n    }\n\n    long[] D = new long[5];\n    for (int x = 0; x &lt; 5; x++) {\n        D[x] = (C[(x+4)%5]) ^ rotateLeft(C[(x+1)%5], 1);\n    }\n\n    for (int x = 0; x &lt; 5; x++) {\n        for (int y = 0; y &lt; 5; y++) {\n            A[x][y] ^= D[x];\n        }\n    }\n    return A;\n}\n\nRho: The state matrix is rotated by a certain number of positions in this step. The amount of rotation is determined by a pre-defined pattern, which varies depending on the version of Keccak being used.\n\n\n\n\nFigure 4 From FIPS 202\n\n\n\nPi: In this step, the columns and rows of the state matrix are rearranged according to a pre-defined permutation. This helps to further increase the diffusion of the input data.\n\n\n\n\nFigure 5 From FIPS 202\n\n\n\nChi: The state matrix is transformed by applying a non-linear function to each row. This helps to introduce non-linearity into the algorithm and make it more resistant to attacks.\n\nIn practice, the Pi and Rho steps are combined into a single step mapping. The combined step mapping is defined as:\npublic static long[][] pi_rho(long[][] A) {\n\n    final int[][] offsets = new int[][] {\n        {0, 1, 62, 28, 27},\n        {36, 44, 6, 55, 20},\n        {3, 10, 43, 25, 39},\n        {41, 45, 15, 21, 8},\n        {18, 2, 61, 56, 14}\n    };\n\n    long[][] B = new long[5][5];\n    for (int y = 0; y &lt; 5; y++) {\n        for (int x = 0; x &lt; 5; x++) {\n            int newX = 2 * x + 3 * y;\n            newX %= 5;\n            int newY = y;\n\n            long rotatedValue = rotateLeft(A[x][y], offsets[y][x]);\n\n            B[newY][newX] = rotatedValue;\n        }\n    }\n\n    return B;\n\n}\n\n\n\nFigure 6 From FIPS 202\n\n\npublic static long[][] chi(long[][] A) {\n    long[][] C = new long[5][5];\n    for (int i = 0; i &lt; 5; i++) {\n        for (int j = 0; j &lt; 5; j++) {\n            C[i][j] = A[i][j] ^ ((~A[(i+1)%5][j]) & A[(i+2)%5][j]);\n        }\n    }\n    return C;\n}\n\nIota: The final step involves XORing a pre-defined round constant with a specific location in the state matrix. This helps to add additional randomness to the output and increase the security of the algorithm.\n\npublic static long[][] iota(long[][] A, int round) {\n    long RC = rc[round];\n    A[0][0] ^= RC;\n    return A;\n}\nIn this case the round constants are retrieved from a lookup table, however the round constants can also be calculated using Algorithm 5 from the NIST standard. Below is the lookup table for the round constants:\nprivate static final long[] rc = {\n    0x0000000000000001L,\n    0x0000000000008082L,\n    0x800000000000808AL,\n    0x8000000080008000L,\n    0x000000000000808BL,\n    0x0000000080000001L,\n    0x8000000080008081L,\n    0x8000000000008009L,\n    0x000000000000008AL,\n    0x0000000000000088L,\n    0x0000000080008009L,\n    0x000000008000000AL,\n    0x000000008000808BL,\n    0x800000000000008BL,\n    0x8000000000008089L,\n    0x8000000000008003L,\n    0x8000000000008002L,\n    0x8000000000000080L,\n    0x000000000000800AL,\n    0x800000008000000AL,\n    0x8000000080008081L,\n    0x8000000000008080L,\n    0x0000000080000001L,\n    0x8000000080008008L\n};\nBy repeating these 5-step mappings multiple times, the input data is progressively transformed into a fixed-length hash output. The number of rounds performed depends on the version of Keccak being used and the desired level of security. The output produced by Keccak is considered to be highly secure and is resistant to various attacks such as collision, preimage, and second preimage attacks.\nA single round is defined as:\npublic static long[][] keccakRound(long[][] A, int round) {\n    A = theta(A);\n    A = pi_rho(A);\n    A = chi(A);\n    A = iota(A, round);\n    return A;\n}\nAnd gets repeated for the number of rounds:\npublic static long[][] keccakf(long[][] A, int n) {\n    for (int i = 0; i &lt; n; i++) {\n        A = keccakRound(A, i);\n    }\n    return A;\n}\nTo put this all together, here is psuedo code for the Keccak algorithm:\nfunction keccak-f(A)\n    for i from 0 to 24\n        A = θ(A)\n        A = π(A)\n        A = ρ(A)\n        A = χ(A)\n        A = ι(A, i)\n    return A\n\nfunction SHA-3(M)\n    P = M || 0x06 || 0x00 || … || 0x80 so that len(P) * constant == rate\n    n = len(P)/rate\n    c = list of blocks with a length of rate bits\n\n    Initialize all state values to 0\n\n    for i from 0 to n-1\n        S = S xor c[i]\n        S = keccak_round(S)\n\n    Z = empty string\n    for i from 0 to n-1\n        Z = Z || S[i*b..(i+1)*b-1]\n    return Z"
  },
  {
    "objectID": "posts/keccak/index.html#applications-of-keccak",
    "href": "posts/keccak/index.html#applications-of-keccak",
    "title": "Simple SHA-3",
    "section": "Applications of Keccak",
    "text": "Applications of Keccak\nKeccak has several applications in the field of cryptography due to its high security and efficiency. Some of the common applications of Keccak include:\n\nHash Functions: Keccak is commonly used as a hash function to securely store and transmit sensitive data. Its resistance to various attacks makes it suitable for applications such as password storage, digital signatures, and message authentication.\nEncryption: Keccak can be used for encryption, especially in applications where data needs to be transmitted securely over a network. The algorithm’s high security makes it a reliable choice for encryption.\nKey Derivation: Keccak can be used to derive keys for cryptographic protocols such as TLS (Transport Layer Security) and SSL (Secure Sockets Layer). It is also used to generate keys for secure communication between different systems.\nBlockchain: Keccak is used as a hashing function in many blockchain systems such as Ethereum and CryptoNote. The algorithm provides high security, which is necessary for protecting the integrity of the blockchain.\nRandom Number Generation: Keccak is used in random number generators for secure applications such as gambling, lottery, and cryptography."
  },
  {
    "objectID": "posts/keccak/index.html#conclusion",
    "href": "posts/keccak/index.html#conclusion",
    "title": "Simple SHA-3",
    "section": "Conclusion",
    "text": "Conclusion\nIn conclusion, Keccak is a powerful cryptographic algorithm that has become a popular choice for secure applications such as password storage, digital signatures, and blockchain. Its high security and efficiency make it a reliable choice for various cryptographic operations, including hashing, encryption, key derivation, and random number generation. The 5-step mappings of Keccak, also known as the Keccak-p permutation, provide a robust framework for transforming input data into a fixed-length hash output. While Keccak may seem complex and intimidating to those unfamiliar with cryptography, this blog post has provided a comprehensive yet accessible guide to the NIST standard for Keccak. By breaking down the technical terms and explaining them in an easy-to-understand way, we hope to have demystified Keccak and made it accessible to anyone interested in cryptography."
  },
  {
    "objectID": "posts/keccak/index.html#parameter-specifications",
    "href": "posts/keccak/index.html#parameter-specifications",
    "title": "Simple SHA-3",
    "section": "Parameter Specifications",
    "text": "Parameter Specifications\nKeccak is described in the format Keccak-p[b,n] where b is the rate + capacity and n is the number of rounds. Additionally, the parameter \\(w\\) is defined as \\(\\frac{b}{25}\\) and \\(l\\) is \\(log_2(w)\\). Keccak-f[b] is a subset of Keccak-p[b,n] where \\(n\\) is fixed to \\(12 + 2l\\).\n\nFIPS 202 Table 1: KECCAK-p permutation widths and related quantities\n\n\nb\n25\n50\n100\n200\n400\n800\n1600\n\n\n\n\nw\n1\n2\n4\n8\n16\n32\n64\n\n\nl\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\nFIPS 202 Table 3: Input block sizes for HMAC\n\n\nHash Function\nSHA3-224\nSHA3-256\nSHA3-384\nSHA3-512\n\n\n\n\nBlock Size (bytes)\n144\n136\n104\n72\n\n\n\n\nKeccak Team Table 3: the parameters of the standard FIPS 202 and SP 800-185 instances\n\n\n\n\n\n\n\n\n\nName\nr\nc\nOutput length (bits)\nSecurity level (bits)\n\n\n\n\nSHA3-224\n1152\n448\n224\n112\n\n\nSHA3-256\n1088\n512\n256\n128\n\n\nSHA3-384\n832\n768\n384\n192\n\n\nSHA3-512\n576\n1024\n512\n256\n\n\n\nIn this blog we are using Keccak-f[1600] which is the SHA-3 standard. This means that the rate is 576, the capacity is 1024, and the output length is 512. \\(w\\) is 64 and \\(l\\) is 6."
  },
  {
    "objectID": "posts/keccak/index.html#padding",
    "href": "posts/keccak/index.html#padding",
    "title": "Simple SHA-3",
    "section": "Padding",
    "text": "Padding\nKeccak pads the end of the input with the byte 0x06 followed by as many 0x00 bytes as necessary to make the input a multiple of the rate of the hash function. The last byte of the last block is set to 0x80."
  },
  {
    "objectID": "posts/keccak/index.html#input",
    "href": "posts/keccak/index.html#input",
    "title": "Simple SHA-3",
    "section": "Input",
    "text": "Input\nKeccak recieves a strings of bits stored in little-endian format. Keccak pads the end of the input with the byte 0x06 followed by as many 0x00 bytes as necessary to make the input a multiple of the rate of the hash function. The last byte of the last block is set to 0x80."
  },
  {
    "objectID": "posts/keccak/index.html#understanding-sha-3s-hash-function",
    "href": "posts/keccak/index.html#understanding-sha-3s-hash-function",
    "title": "Simple SHA-3",
    "section": "Understanding SHA-3’s Hash Function",
    "text": "Understanding SHA-3’s Hash Function\nThe state of the hash function is represented as a 5x5 matrix of 64-bit words. The state is initialized to all zeros. The input is then XORed with the state. The state is then passed through the Keccak-p permutation function. This process is repeated until all of the input has been processed. The output is the state of the hash function.\nTo convert from a bit string to the state array we use the following function:\nprivate static long[][] stringToStateArray(String s) {\n    long[][] A = new long[5][5];\n    int i = 0;\n\n    for (int y = 0; y &lt; 5; y++) {\n        for (int x = 0; x &lt; 5; x++) {\n            String blockString = s.substring(i * 64, (i + 1) * 64);\n            A[x][y] = Long.reverse(Long.parseUnsignedLong(blockString, 2));\n            i++;\n            // 9 is the number of longs to store 576 (rate) / 64 (size of long) = 9 longs\n            if (i&gt;=8) {\n                return A;\n            }\n        }\n    }\n\n    return A;\n}\nMore information about this can be found in section 3.1.2 of FIPS 202.\nThe 5-step mappings in the Keccak cryptographic algorithm are the core components that transform input data into a fixed-length hash output.\nSome of the step mappings require this function, which rotates the bits of a 64-bit integer to the left by a specified number of bits:\nprivate static long rotateLeft(long x, int n) {\n    return (x &lt;&lt; n) | (x &gt;&gt;&gt; (64 - n));\n}\n\nTheta: In this step, the input data is transformed by applying a linear function to each row of the state matrix. This step helps to increase the security of the algorithm by increasing the diffusion of the input data.\n\n\n\n\nFigure 3 From FIPS 202\n\n\npublic static long[][] theta(long[][] A) {\n    long[] C = new long[5];\n    for (int x = 0; x &lt; 5; x++) {\n        C[x] = A[x][0] ^ A[x][1] ^ A[x][2] ^ A[x][3] ^ A[x][4];\n    }\n\n    long[] D = new long[5];\n    for (int x = 0; x &lt; 5; x++) {\n        D[x] = (C[(x+4)%5]) ^ rotateLeft(C[(x+1)%5], 1);\n    }\n\n    for (int x = 0; x &lt; 5; x++) {\n        for (int y = 0; y &lt; 5; y++) {\n            A[x][y] ^= D[x];\n        }\n    }\n    return A;\n}\n\nRho: The state matrix is rotated by a certain number of positions in this step. The amount of rotation is determined by a pre-defined pattern, which varies depending on the version of Keccak being used.\n\n\n\n\nFigure 4 From FIPS 202\n\n\n\nPi: In this step, the columns and rows of the state matrix are rearranged according to a pre-defined permutation. This helps to further increase the diffusion of the input data.\n\n\n\n\nFigure 5 From FIPS 202\n\n\n\nChi: The state matrix is transformed by applying a non-linear function to each row. This helps to introduce non-linearity into the algorithm and make it more resistant to attacks.\n\nIn practice, the Pi and Rho steps are combined into a single step mapping. The combined step mapping is defined as:\npublic static long[][] pi_rho(long[][] A) {\n\n    final int[][] offsets = new int[][] {\n        {0, 1, 62, 28, 27},\n        {36, 44, 6, 55, 20},\n        {3, 10, 43, 25, 39},\n        {41, 45, 15, 21, 8},\n        {18, 2, 61, 56, 14}\n    };\n\n    long[][] B = new long[5][5];\n    for (int y = 0; y &lt; 5; y++) {\n        for (int x = 0; x &lt; 5; x++) {\n            int newX = 2 * x + 3 * y;\n            newX %= 5;\n            int newY = y;\n\n            long rotatedValue = rotateLeft(A[x][y], offsets[y][x]);\n\n            B[newY][newX] = rotatedValue;\n        }\n    }\n\n    return B;\n\n}\n\n\n\nFigure 6 From FIPS 202\n\n\npublic static long[][] chi(long[][] A) {\n    long[][] C = new long[5][5];\n    for (int i = 0; i &lt; 5; i++) {\n        for (int j = 0; j &lt; 5; j++) {\n            C[i][j] = A[i][j] ^ ((~A[(i+1)%5][j]) & A[(i+2)%5][j]);\n        }\n    }\n    return C;\n}\n\nIota: The final step involves XORing a pre-defined round constant with a specific location in the state matrix. This helps to add additional randomness to the output and increase the security of the algorithm.\n\npublic static long[][] iota(long[][] A, int round) {\n    long RC = rc[round];\n    A[0][0] ^= RC;\n    return A;\n}\nIn this case the round constants are retrieved from a lookup table, however the round constants can also be calculated using Algorithm 5 from the NIST standard. Below is the lookup table for the round constants:\nprivate static final long[] rc = {\n    0x0000000000000001L,\n    0x0000000000008082L,\n    0x800000000000808AL,\n    0x8000000080008000L,\n    0x000000000000808BL,\n    0x0000000080000001L,\n    0x8000000080008081L,\n    0x8000000000008009L,\n    0x000000000000008AL,\n    0x0000000000000088L,\n    0x0000000080008009L,\n    0x000000008000000AL,\n    0x000000008000808BL,\n    0x800000000000008BL,\n    0x8000000000008089L,\n    0x8000000000008003L,\n    0x8000000000008002L,\n    0x8000000000000080L,\n    0x000000000000800AL,\n    0x800000008000000AL,\n    0x8000000080008081L,\n    0x8000000000008080L,\n    0x0000000080000001L,\n    0x8000000080008008L\n};\nBy repeating these 5-step mappings multiple times, the input data is progressively transformed into a fixed-length hash output. The number of rounds performed depends on the version of Keccak being used and the desired level of security. The output produced by Keccak is considered to be highly secure and is resistant to various attacks such as collision, preimage, and second preimage attacks.\nA single round is defined as:\npublic static long[][] keccakRound(long[][] A, int round) {\n    A = theta(A);\n    A = pi_rho(A);\n    A = chi(A);\n    A = iota(A, round);\n    return A;\n}\nAnd gets repeated for the number of rounds:\npublic static long[][] keccakf(long[][] A, int n) {\n    for (int i = 0; i &lt; n; i++) {\n        A = keccakRound(A, i);\n    }\n    return A;\n}\nTo put this all together, here is psuedo code for the Keccak algorithm:\nfunction keccak-f(A)\n    for i from 0 to 24\n        A = θ(A)\n        A = π(A)\n        A = ρ(A)\n        A = χ(A)\n        A = ι(A, i)\n    return A\n\nfunction SHA-3(M)\n    P = M || 0x06 || 0x00 || … || 0x80 so that len(P) * constant == rate\n    n = len(P)/rate\n    c = list of blocks with a length of rate bits\n\n    Initialize all state values to 0\n\n    for i from 0 to n-1\n        S = S xor c[i]\n        S = keccak_round(S)\n\n    Z = empty string\n    for i from 0 to n-1\n        Z = Z || S[i*b..(i+1)*b-1]\n    return Z"
  },
  {
    "objectID": "posts/keccak/index.html#references",
    "href": "posts/keccak/index.html#references",
    "title": "Simple SHA-3",
    "section": "References",
    "text": "References\n\nKeccak Team - Keccak Specifications Summary\nFIPS 202"
  },
  {
    "objectID": "posts/discretelogarithmproblem/index.html",
    "href": "posts/discretelogarithmproblem/index.html",
    "title": "Discrete Logarithm Problem",
    "section": "",
    "text": "The discrete logarithm problem is a fundamental concept in the field of cryptography. It plays a crucial role in many encryption algorithms and serves as the basis for various security protocols. In this blog post, we will explore what the discrete logarithm problem is and why it is significant.\n\n\nBefore delving into the discrete logarithm problem, let’s quickly recap logarithms. A logarithm is an operation that calculates the exponent to which a particular base must be raised to obtain a given number. In simpler terms, it answers the question: “What power do I need to raise this base to get this number?”\nFor example, in the equation 2^x = 8, the logarithm base 2 of 8 is 3, denoted as log2(8) = 3. It tells us that 2 raised to the power of 3 equals 8.\n\n\n\nNow, let’s move on to the discrete logarithm problem. In cryptography, we often deal with mathematical structures known as finite fields. These fields have a finite number of elements and exhibit certain properties that make them suitable for cryptographic operations.\nThe discrete logarithm problem is defined within a finite field. Given a base element g and a target element h, the problem involves finding an exponent x such that \\(g^x = h.\\) Mathematically, it can be represented as \\(x = log_g(h).\\)\nThe challenge lies in finding the value of x efficiently, especially when the field is very large and calculations become computationally expensive. In other words, the problem is to determine the unknown exponent x based on the known values of g and h.\n\nimport matplotlib.pyplot as plt\n\n# Define the finite field parameters\nprime_modulus = 17  # Modulus value for the finite field\n\n# Generate the base and target elements\n# All integers from 1 to (prime_modulus - 1)\nbase_elements = range(1, prime_modulus)  \n\n# Calculate the target elements using exponentiation\ntarget_elements = [pow(2, x, prime_modulus) for x in base_elements]  \n\nplt.scatter(base_elements, target_elements, color='red', marker='o')\n\nplt.xlabel('Base Elements')\nplt.ylabel('Target Elements')\nplt.title('Discrete Logarithm Problem')\n\nplt.show()\n\n\n\n\nNow, if we consider the plotted graph, with the x-axis representing the base elements and the y-axis representing the target elements, finding the discrete logarithm involves determining the x-coordinate (base element) corresponding to a given y-coordinate (target element).\nThe challenge arises because, in a finite field, as the field size (p) grows larger, the number of possible base and target elements increases exponentially.\n\n\n\nThe discrete logarithm problem forms the foundation of various cryptographic algorithms, particularly those based on public-key cryptography. These algorithms rely on the difficulty of solving the discrete logarithm problem to ensure the security of encrypted data.\nOne such algorithm is Diffie-Hellman key exchange, which allows two parties to establish a shared secret key over an insecure channel.\nOther algorithms, such as DSA (Digital Signature Algorithm) and ElGamal encryption, also depend on the discrete logarithm problem for their security.\n\n\n\nThe emergence of quantum computing has significant implications for cryptographic algorithms, including those based on the discrete logarithm problem. Classical computers employ the index calculus algorithm to solve this problem, but it becomes time-consuming as the field size increases. Quantum computers, however, leverage algorithms like Shor’s algorithm, which can efficiently solve the discrete logarithm problem in polynomial time. This poses a challenge to the security of classical cryptographic schemes when faced with a powerful quantum computer.\nWhile there are no quantum computers large enough to break the discrete logarithm problem at the time of writing, it is important to consider the implications of quantum computing on the security of cryptographic algorithms. This is especially true for those that rely on the discrete logarithm problem, such as Diffie-Hellman key exchange and DSA.\n\n\n\nIn summary, the discrete logarithm problem is a mathematical challenge of finding an unknown exponent within a finite field. Its significance in cryptography cannot be overstated, as it underpins the security of various encryption algorithms and protocols. However, the emergence of quantum computing poses a threat to the security of these algorithms, as quantum computers can efficiently solve the discrete logarithm problem. We should look to develop quantum-resistant cryptographic schemes to ensure the security of our data in the future such as lattice-based cryptography."
  },
  {
    "objectID": "posts/discretelogarithmproblem/index.html#understanding-logarithms",
    "href": "posts/discretelogarithmproblem/index.html#understanding-logarithms",
    "title": "Discrete Logarithm Problem",
    "section": "",
    "text": "Before delving into the discrete logarithm problem, let’s quickly recap logarithms. A logarithm is an operation that calculates the exponent to which a particular base must be raised to obtain a given number. In simpler terms, it answers the question: “What power do I need to raise this base to get this number?”\nFor example, in the equation 2^x = 8, the logarithm base 2 of 8 is 3, denoted as log2(8) = 3. It tells us that 2 raised to the power of 3 equals 8."
  },
  {
    "objectID": "posts/discretelogarithmproblem/index.html#the-discrete-logarithm-problem",
    "href": "posts/discretelogarithmproblem/index.html#the-discrete-logarithm-problem",
    "title": "Discrete Logarithm Problem",
    "section": "",
    "text": "Now, let’s move on to the discrete logarithm problem. In cryptography, we often deal with mathematical structures known as finite fields. These fields have a finite number of elements and exhibit certain properties that make them suitable for cryptographic operations.\nThe discrete logarithm problem is defined within a finite field. Given a base element g and a target element h, the problem involves finding an exponent x such that \\(g^x = h.\\) Mathematically, it can be represented as \\(x = log_g(h).\\)\nThe challenge lies in finding the value of x efficiently, especially when the field is very large and calculations become computationally expensive. In other words, the problem is to determine the unknown exponent x based on the known values of g and h.\n\nimport matplotlib.pyplot as plt\n\n# Define the finite field parameters\nprime_modulus = 17  # Modulus value for the finite field\n\n# Generate the base and target elements\n# All integers from 1 to (prime_modulus - 1)\nbase_elements = range(1, prime_modulus)  \n\n# Calculate the target elements using exponentiation\ntarget_elements = [pow(2, x, prime_modulus) for x in base_elements]  \n\nplt.scatter(base_elements, target_elements, color='red', marker='o')\n\nplt.xlabel('Base Elements')\nplt.ylabel('Target Elements')\nplt.title('Discrete Logarithm Problem')\n\nplt.show()\n\n\n\n\nNow, if we consider the plotted graph, with the x-axis representing the base elements and the y-axis representing the target elements, finding the discrete logarithm involves determining the x-coordinate (base element) corresponding to a given y-coordinate (target element).\nThe challenge arises because, in a finite field, as the field size (p) grows larger, the number of possible base and target elements increases exponentially."
  },
  {
    "objectID": "posts/discretelogarithmproblem/index.html#significance-in-cryptography",
    "href": "posts/discretelogarithmproblem/index.html#significance-in-cryptography",
    "title": "Discrete Logarithm Problem",
    "section": "",
    "text": "The discrete logarithm problem forms the foundation of various cryptographic algorithms, particularly those based on public-key cryptography. These algorithms rely on the difficulty of solving the discrete logarithm problem to ensure the security of encrypted data.\nOne such algorithm is Diffie-Hellman key exchange, which allows two parties to establish a shared secret key over an insecure channel.\nOther algorithms, such as DSA (Digital Signature Algorithm) and ElGamal encryption, also depend on the discrete logarithm problem for their security."
  },
  {
    "objectID": "posts/discretelogarithmproblem/index.html#conclusion",
    "href": "posts/discretelogarithmproblem/index.html#conclusion",
    "title": "Discrete Logarithm Problem",
    "section": "",
    "text": "In summary, the discrete logarithm problem is a mathematical challenge of finding an unknown exponent within a finite field. Its significance in cryptography cannot be overstated, as it underpins the security of various encryption algorithms and protocols. However, the emergence of quantum computing poses a threat to the security of these algorithms, as quantum computers can efficiently solve the discrete logarithm problem. We should look to develop quantum-resistant cryptographic schemes to ensure the security of our data in the future such as lattice-based cryptography."
  },
  {
    "objectID": "posts/discretelogarithmproblem/index.html#quantum-security",
    "href": "posts/discretelogarithmproblem/index.html#quantum-security",
    "title": "Discrete Logarithm Problem",
    "section": "",
    "text": "The emergence of quantum computing has significant implications for cryptographic algorithms, including those based on the discrete logarithm problem. Classical computers employ the index calculus algorithm to solve this problem, but it becomes time-consuming as the field size increases. Quantum computers, however, leverage algorithms like Shor’s algorithm, which can efficiently solve the discrete logarithm problem in polynomial time. This poses a challenge to the security of classical cryptographic schemes when faced with a powerful quantum computer.\nWhile there are no quantum computers large enough to break the discrete logarithm problem at the time of writing, it is important to consider the implications of quantum computing on the security of cryptographic algorithms. This is especially true for those that rely on the discrete logarithm problem, such as Diffie-Hellman key exchange and DSA."
  }
]